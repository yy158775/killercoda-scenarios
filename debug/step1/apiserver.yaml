apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  labels:
    karmada.io/bootstrapping: app-defaults
  name: karmada-apiserver
  namespace: karmada-system
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: karmada-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: karmada-apiserver
      name: karmada-apiserver
      namespace: karmada-system
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - karmada-apiserver
            topologyKey: kubernetes.io/hostname
      containers:
      - command:
        - kube-apiserver
        - --allow-privileged=true
        - --authorization-mode=Node,RBAC
        - --client-ca-file=/etc/kubernetes/pki/ca.crt
        - --enable-admission-plugins=NodeRestriction
        - --enable-bootstrap-token-auth=true
        - --etcd-cafile=/etc/kubernetes/pki/ca.crt
        - --etcd-certfile=/etc/kubernetes/pki/etcd-client.crt
        - --etcd-keyfile=/etc/kubernetes/pki/etcd-client.key
        - --etcd-servers=https://etcd-0.etcd.karmada-system.svc.cluster.local:2379
        - --bind-address=0.0.0.0
        - --kubelet-client-certificate=/etc/kubernetes/pki/karmada.crt
        - --kubelet-client-key=/etc/kubernetes/pki/karmada.key
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --disable-admission-plugins=StorageObjectInUseProtection,ServiceAccount
        - --runtime-config=
        - --apiserver-count=1
        - --secure-port=5443
        - --service-account-issuer=https://kubernetes.default.svc.cluster.local
        - --service-account-key-file=/etc/kubernetes/pki/karmada.key
        - --service-account-signing-key-file=/etc/kubernetes/pki/karmada.key
        - --service-cluster-ip-range=10.96.0.0/12
        - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt
        - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key
        - --requestheader-allowed-names=front-proxy-client
        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt
        - --requestheader-extra-headers-prefix=X-Remote-Extra-
        - --requestheader-group-headers=X-Remote-Group
        - --requestheader-username-headers=X-Remote-User
        - --tls-cert-file=/etc/kubernetes/pki/karmada.crt
        - --tls-private-key-file=/etc/kubernetes/pki/karmada.key
        image: k8s.gcr.io/kube-apiserver:v1.24.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: 5443
            scheme: HTTPS
          initialDelaySeconds: 15
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: karmada-apiserver
        ports:
        - containerPort: 5443
          name: server
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 5443
            scheme: HTTPS
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes/pki
          name: karmada-cert
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoExecute
        operator: Exists
      volumes:
      - name: karmada-cert
        secret:
          defaultMode: 420
          secretName: karmada-cert